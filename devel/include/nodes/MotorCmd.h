// Generated by gencpp from file nodes/MotorCmd.msg
// DO NOT EDIT!


#ifndef NODES_MESSAGE_MOTORCMD_H
#define NODES_MESSAGE_MOTORCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nodes
{
template <class ContainerAllocator>
struct MotorCmd_
{
  typedef MotorCmd_<ContainerAllocator> Type;

  MotorCmd_()
    : speed(0)
    , veer(0)  {
    }
  MotorCmd_(const ContainerAllocator& _alloc)
    : speed(0)
    , veer(0)  {
  (void)_alloc;
    }



   typedef int64_t _speed_type;
  _speed_type speed;

   typedef int64_t _veer_type;
  _veer_type veer;





  typedef boost::shared_ptr< ::nodes::MotorCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nodes::MotorCmd_<ContainerAllocator> const> ConstPtr;

}; // struct MotorCmd_

typedef ::nodes::MotorCmd_<std::allocator<void> > MotorCmd;

typedef boost::shared_ptr< ::nodes::MotorCmd > MotorCmdPtr;
typedef boost::shared_ptr< ::nodes::MotorCmd const> MotorCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nodes::MotorCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nodes::MotorCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nodes::MotorCmd_<ContainerAllocator1> & lhs, const ::nodes::MotorCmd_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed &&
    lhs.veer == rhs.veer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nodes::MotorCmd_<ContainerAllocator1> & lhs, const ::nodes::MotorCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nodes

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nodes::MotorCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nodes::MotorCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nodes::MotorCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nodes::MotorCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nodes::MotorCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nodes::MotorCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nodes::MotorCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e331e937d522aefe0840576d89ae8c40";
  }

  static const char* value(const ::nodes::MotorCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe331e937d522aefeULL;
  static const uint64_t static_value2 = 0x0840576d89ae8c40ULL;
};

template<class ContainerAllocator>
struct DataType< ::nodes::MotorCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nodes/MotorCmd";
  }

  static const char* value(const ::nodes::MotorCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nodes::MotorCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 speed\n"
"int64 veer\n"
;
  }

  static const char* value(const ::nodes::MotorCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nodes::MotorCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.veer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nodes::MotorCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nodes::MotorCmd_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<int64_t>::stream(s, indent + "  ", v.speed);
    s << indent << "veer: ";
    Printer<int64_t>::stream(s, indent + "  ", v.veer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NODES_MESSAGE_MOTORCMD_H
