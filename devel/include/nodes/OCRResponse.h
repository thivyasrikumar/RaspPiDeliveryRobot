// Generated by gencpp from file nodes/OCRResponse.msg
// DO NOT EDIT!


#ifndef NODES_MESSAGE_OCRRESPONSE_H
#define NODES_MESSAGE_OCRRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nodes
{
template <class ContainerAllocator>
struct OCRResponse_
{
  typedef OCRResponse_<ContainerAllocator> Type;

  OCRResponse_()
    : is_ready(false)
    , detected_text()  {
    }
  OCRResponse_(const ContainerAllocator& _alloc)
    : is_ready(false)
    , detected_text(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _is_ready_type;
  _is_ready_type is_ready;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _detected_text_type;
  _detected_text_type detected_text;





  typedef boost::shared_ptr< ::nodes::OCRResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nodes::OCRResponse_<ContainerAllocator> const> ConstPtr;

}; // struct OCRResponse_

typedef ::nodes::OCRResponse_<std::allocator<void> > OCRResponse;

typedef boost::shared_ptr< ::nodes::OCRResponse > OCRResponsePtr;
typedef boost::shared_ptr< ::nodes::OCRResponse const> OCRResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nodes::OCRResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nodes::OCRResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nodes::OCRResponse_<ContainerAllocator1> & lhs, const ::nodes::OCRResponse_<ContainerAllocator2> & rhs)
{
  return lhs.is_ready == rhs.is_ready &&
    lhs.detected_text == rhs.detected_text;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nodes::OCRResponse_<ContainerAllocator1> & lhs, const ::nodes::OCRResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nodes

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nodes::OCRResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nodes::OCRResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nodes::OCRResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nodes::OCRResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nodes::OCRResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nodes::OCRResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nodes::OCRResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd3bb149a49a428a8a8333b15a2fa378";
  }

  static const char* value(const ::nodes::OCRResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd3bb149a49a428aULL;
  static const uint64_t static_value2 = 0x8a8333b15a2fa378ULL;
};

template<class ContainerAllocator>
struct DataType< ::nodes::OCRResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nodes/OCRResponse";
  }

  static const char* value(const ::nodes::OCRResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nodes::OCRResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_ready\n"
"string detected_text\n"
;
  }

  static const char* value(const ::nodes::OCRResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nodes::OCRResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_ready);
      stream.next(m.detected_text);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OCRResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nodes::OCRResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nodes::OCRResponse_<ContainerAllocator>& v)
  {
    s << indent << "is_ready: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_ready);
    s << indent << "detected_text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.detected_text);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NODES_MESSAGE_OCRRESPONSE_H
